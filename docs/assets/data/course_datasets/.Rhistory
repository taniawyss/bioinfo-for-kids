geom_boxplot() +
scale_fill_manual(values=c("cornflowerblue", "coral", "purple", "lightgreen")) +
xlab("") + # leave the x-axis name empty
ylab("Expression level (FPKM)") + # change the y-axis name
ggtitle("SOX10") +
theme_bw()  + # black/white look of plot
theme(legend.position = "none", axis.text.x= element_text(angle = 90)) +
facet_wrap(~Mutation.Status)
p1 <- ggplot(metadata,
aes(x = Subtype,
y = SOX10,
fill = Subtype)) +
geom_boxplot() +
scale_fill_manual(values=color) + # use our colors of choice
xlab("") +
ylab("Expression level (FPKM)") +
ggtitle("SOX10") +
theme_bw()  +
theme(legend.position = "none", axis.text.x= element_text(angle = 90))
p1
# Create a scatter plot of SOX10 vs TMEM9
p2 <- ggplot(data=metadata, aes(x=TMEM9, y=SOX10, color=Subtype)) +
geom_point() +
scale_color_manual(values=color) +
ggtitle("TMEM9 vs SOX10 expression") +
xlab("TMEM9 (FPKM)") + ylab("SOX10 (FPKM)") +
theme_bw()
# we can adapt the relative width of each plot, making one wider as the other:
plot_grid(p1, p2, nrow=1, rel_widths = c(1, 1.5))
# we can adapt the relative width of each plot, making one wider as the other:
plot_grid(p1, p2, nrow=1, rel_widths = c(1, 2))
# Create a customized scatter plot of SOX10 vs TMEM9
p2 <- ggplot(data=metadata, aes(x=TMEM9, y=SOX10, color=Subtype)) +
geom_point() +
scale_color_manual(values=color) +
ggtitle("TMEM9 vs SOX10 expression") +
xlab("TMEM9 (FPKM)") + ylab("SOX10 (FPKM)") +
theme_bw()
p2
p1 <- ggplot(metadata,
aes(x = Subtype,
y = SOX10,
fill = Subtype)) +
geom_boxplot() +
scale_fill_manual(values=color) + # use our colors of choice
xlab("") +
ylab("Expression level (FPKM)") +
ggtitle("SOX10") +
theme_bw()  +
theme(legend.position = "none", axis.text.x= element_text(angle = 90))
# Note: when a ggplot is saved to an object, it is not in the RStudio plotting
# window directly. If you want to view the ggplot object, just call its name
# in the console, and it will appear in the plotting window. Try with the 2
# ggplot objects we just created:
p1
p2
getwd()
# Example 1: boxplot of SOX10:
ggplot(metadata, # the data frame that contains the values to plot
aes(x = Subtype, # what will be on the x axis
y = SOX10, # what will be on the y axis
fill = Subtype)) +
geom_boxplot() +
ggsave(filename = "SOX10_boxplot.pdf")
# Example 2: saving a ggplot object, eg p1 created above:
ggsave(filename = "SOX10_boxplot.pdf", plot = p1)
# Example 2: saving a ggplot object, eg p1 created above, and adding
# size options:
ggsave(filename = "SOX10_boxplot_2.pdf", plot = p1, )
# Example 2: saving a ggplot object, eg p1 created above, and adding
# size options:
ggsave(filename = "SOX10_boxplot_2.pdf", plot = p1, width = 5, height = 5 )
# Example 2: saving a ggplot object, eg p1 created above, and adding
# size options:
ggsave(filename = "SOX10_boxplot_2.pdf", plot = p1, width = 3, height = 5 )
?pdf
?dev.off
# Finally, a plot created with the base graphics package (i.e plot() function)
# or arranged with cowplot, can be exported with the pdf() and dev.off()
# functions of the grDevices package
pdf(file = "SOX10_multiPanel.pdf", width = 6, height = 5)
plot_grid(p1, p2, nrow=1, rel_widths = c(1, 2))
dev.off()
# Finally, a plot created with the base graphics package (i.e plot() function)
# or arranged with cowplot, can be exported with the pdf() and dev.off()
# functions of the grDevices package
pdf(file = "SOX10_multiPanel.pdf", width = 6, height = 3)
plot_grid(p1, p2, nrow=1, rel_widths = c(1, 2))
dev.off()
# create separate vectors of expression of TMEM9 in Undifferentiated and Melanocytic
metadata.sub$Cell.Line %in% colnames(expression_data) # check if samples are present in matrix
# To name objects, only use letters, numbers, dots . , and underscores _
# Cannot start with a number !!! START WITH A LETTER !!!
# Cannot contain operators
# Cannot contain spaces
5days <- 5
# Access elements of a vector with the square brackets [ ]:
height[1] # get the first element
# Comparison: < , > , <= , >= , == (equal to), != (different from)
# Always return logical values
c(1,3,2) == 2
a[c(FALSE,FALSE,TRUE,TRUE)] # select the elements which are TRUE
# The [ ] operator can also accept a logical vector and only the
# elements that are "TRUE" will be selected from the vector.
a <- 1:4
a[c(FALSE,FALSE,TRUE,TRUE)] # select the elements which are TRUE
a[a>2] # the logical vector is provided by a logical expression
# Missing values are usually represented by NA:
y <- c(1,2,3,4,5,NA,NA)
# NAs interfer with many functions:
mean(y)
# Arguments often exist to ignore the NAs before calculation
mean(y, na.rm=TRUE)
# Alternatively, use na.omit() to remove NAs from the data
y_cleaned <- na.omit(y)
mean(y_cleaned)
### !!! NA is different from NaN !!!
x <- c(1, NA, 0/0) # 0/0 gives NaN = "Not a Number"
poets[2,2] # gets the element on row 2 in column 2
# To set the current working directory to another location:
setwd("/Users/tania/Dropbox/My Mac (pc-10.home)/Documents/BCF/courses/intro_to_R/intro-to-R/docs/assets/data/course_datasets/")
# To set the current working directory to another location:
setwd("/Users/tania/Dropbox/My Mac (pc-10.home)/Documents/BCF/courses/
intro_to_R/intro-to-R/docs/assets/data/course_datasets/")
# To set the current working directory to another location:
setwd("/Users/tania/Dropbox/My Mac (pc-10.home)/Documents/BCF/courses/intro_to_R/intro-to-R/docs/assets/data/course_datasets/")
# Let's read a csv file
# ! Check your working directory with getwd() and change the path to where you have saved the file!
# Using the all purpose read.table() function, we need to specify some of the
# arguments to import a csv file.
clinical_data <- read.table("example_clinical_data_03102024.csv",
header=TRUE, sep=",")
# Of course, to import a csv file, we can use the read.csv() function
# Except from the "file" argument, all other arguments can be omitted because
# the defaults are adapted to .csv
clinical_data <- read.csv("example_clinical_data_03102024.csv")
# We export the clinical_data_updated data frame:
write.table(clinical_data_updated,
"example_clinical_data_updated_03102024.csv",
quote=FALSE,
sep=",",
row.names=FALSE)
# We export the clinical_data_updated data frame:
# If you don't specify the path to where it should be saved, it will be
# saved in the working directory, which you can check with
getwd()
subset(clinical_data, Disease=="Tumor")
subset(clinical_data, Disease=="Tumor" & Sex=="female")
subset(clinical_data, Sex=="male" & (Age > 75 | Age < 60))
# Read in the metadata of tumor cell lines (comes from the paper's supplementary
# files)
metadata <- read.csv("1-s2.0-S1535610818301223-mmc2.csv",
header = TRUE )
# Let's check the Subtypes available
table(metadata$Subtype)
# Convert Subtype to a factor (important for plotting order)
metadata$Subtype <- factor(metadata$Subtype,
levels = c("Undifferentiated", "Neural crest like","Transitory", "Melanocytic"))
class(metadata$Subtype)
# read in the expression data generated for each cell line:
expression_data <- read.table("example_gene_expression_03102024.txt",
header=T)
# Add rownames to the metadata, based on the column "Gene"
rownames(expression_data) <- expression_data$Gene
# Remove the column "Gene"
expression_data$Gene <- NULL
expression_data <- as.matrix(expression_data)
# Get a vector of sample names that are present in both objects:
common_samples <- intersect(metadata$Cell.Line, colnames(expression_data))
# Add expression of TMEM9 and SOX10 to the metadata df, extracting the column names
# that correspond to the metadata$Cell.Line
# It has to be a numeric vector!
class(expression_data["TMEM9", metadata$Cell.Line])
metadata$TMEM9 <- expression_data["TMEM9", metadata$Cell.Line]
metadata$SOX10 <- expression_data["SOX10", metadata$Cell.Line]
str(metadata) # check
str(metadata) # check the format
# We create a basic boxplot that indicates the gene expression (y axis) per subtype
# (x axis)
ggplot(metadata, # the data frame that contains the values to plot
aes(x = Subtype, # what will be on the x axis
y = TMEM9, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_boxplot()  # additional layer to choose a default boxplot
# We create a basic boxplot that indicates the gene expression (y axis) per subtype
# (x axis)
ggplot(metadata, # the data frame that contains the values to plot
aes(x = Subtype, # what will be on the x axis
y = TMEM9, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_boxplot()  # additional layer to choose a default boxplot
# We can also create a scatter plot of one gene versus the other
ggplot(metadata, # the data frame that contains the values to plot
aes(x = TMEM9, # what will be on the x axis
y = SOX10, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_point()  # additional layer to choose a default scatter plot
# With this code, we created a scatter plot one gene versus the other
ggplot(metadata, # the data frame that contains the values to plot
aes(x = TMEM9, # what will be on the x axis
y = SOX10, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_point()  # additional layer to choose a default scatter plot
# Solution
ggplot(metadata, # the data frame that contains the values to plot
aes(x = TMEM9, # what will be on the x axis
y = SOX10, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_point()  # additional layer to choose a default scatter plot
# Solution
ggplot(metadata, # the data frame that contains the values to plot
aes(x = TMEM9, # what will be on the x axis
y = SOX10, # what will be on the y axis
color = Subtype)) + # how to group the y values
geom_point()  + # additional layer to choose a default scatter plot
scale_color_manual(values=c("cornflowerblue", "coral", "purple", "lightgreen")) +
theme_bw() +
ggtitle("TMEM9 vs SOX10")
# Read in the metadata (same as in the plotting section!)
metadata <- read.csv("1-s2.0-S1535610818301223-mmc2.csv",
header = TRUE )
# lets check the subtypes
table(metadata$Subtype)
# subset to "Melanocytic" and "Undifferentiated" subtypes
metadata.sub <- metadata[metadata$Subtype %in% c("Melanocytic","Undifferentiated"),]
# create a factor (important for plotting and in some test functions)
metadata.sub$Subtype <- factor(metadata.sub$Subtype, levels = c("Undifferentiated","Melanocytic"))
class(metadata.sub$Subtype)
# Read in the expression data (same as in the plotting section!)
expression_data <- read.table("example_gene_expression_03102024.txt",
header=T)
# Add rownames to the metadata, based on the column "Gene"
rownames(expression_data) <- expression_data$Gene
# Remove the column "Gene"
expression_data$Gene <- NULL
# convert from a data.frame to a matrix
expression_data <- as.matrix(expression_data)
# create separate vectors of expression of TMEM9 in Undifferentiated and Melanocytic
metadata.sub$Cell.Line %in% colnames(expression_data) # check if samples are present in matrix
Melanocytic_cell_lines <- metadata.sub$Cell.Line[metadata.sub$Subtype=="Melanocytic"]
Undifferentiated_cell_lines <- metadata.sub$Cell.Line[metadata.sub$Subtype=="Undifferentiated"]
TMEM9_expression_Melanocytic <- expression_data["TMEM9",Melanocytic_cell_lines]
TMEM9_expression_Undifferentiated <- expression_data["TMEM9",Undifferentiated_cell_lines]
# Histogram - Melanocytic
hist(TMEM9_expression_Melanocytic,
xlab="FPKM",
main="TMEM9 - Melanocytic")
# Quantile-Quantile Plots - Melanocytic
qqnorm(TMEM9_expression_Melanocytic)
qqline(TMEM9_expression_Melanocytic)
?qqnorm
# Shapiro-Wilk test of normality - Melanocytic
shapiro.test(TMEM9_expression_Melanocytic)
# Histogram - Undifferentiated
hist(TMEM9_expression_Undifferentiated,
xlab="FPKM",
main="TMEM9 - Undifferentiated")
# Histogram - Melanocytic
hist(TMEM9_expression_Melanocytic,
xlab="FPKM",
main="TMEM9 - Melanocytic")
?hist()
# Histogram - Melanocytic
# hist() is a base graphics function. For customization of the plot, we change
# the arguments within the hist() function.
hist(TMEM9_expression_Melanocytic, # continuous values to be plotted on the histogram
xlab="FPKM", # to change the x-axis name
main="TMEM9 - Melanocytic") # to change the title
# Shapiro-Wilk test of normality - Melanocytic
shapiro.test(TMEM9_expression_Melanocytic)
# Histogram - Undifferentiated
hist(TMEM9_expression_Undifferentiated,
xlab="FPKM",
main="TMEM9 - Undifferentiated")
# Quantile-Quantile Plots - Undifferentiated
qqnorm(TMEM9_expression_Undifferentiated)
qqline(TMEM9_expression_Undifferentiated)
# Shapiro-Wilk test of normality - Undifferentiated
shapiro.test(TMEM9_expression_Undifferentiated)
?t.test
t.test(TMEM9_expression_Melanocytic,
TMEM9_expression_Undifferentiated)
# t.test() and other tests return a list that can be assigned to a variable
test_res <- t.test(TMEM9_expression_Melanocytic,
TMEM9_expression_Undifferentiated)
# View the names of the list’s slots using names().
names(test_res)
# Access the elements of a list using the $ or the [[ ]] operators.
test_res[['p.value']]
# add expression of TMEM9 to the metadata df
metadata.sub$TMEM9 <- expression_data["TMEM9", metadata.sub$Cell.Line]
head(metadata.sub) # check
# run the t.test
t.test(TMEM9 ~ Subtype, data=metadata.sub)
library(ggplot2)
ggplot(metadata.sub, aes(x=Subtype, y=TMEM9, fill=Subtype)) +
geom_boxplot() +
ylab("FPKM") +
ggtitle("TMEM9")
# add results of t.test
library(ggpubr)
ggplot(metadata.sub, aes(x=Subtype, y=TMEM9, fill=Subtype)) +
geom_boxplot() +
stat_compare_means(method = "t.test") +
ylab("FPKM") +
ggtitle("TMEM9")
# Add SOX10 expression to the metadata
metadata.sub$SOX10 <- expression_data["SOX10",metadata.sub$Cell.Line]
head(metadata.sub)
# Check normality - Melanocytic
SOX10_expression_Melanocytic <- metadata.sub$SOX10[metadata.sub$Subtype=="Melanocytic"]
hist(SOX10_expression_Melanocytic,
xlab="FPKM",
main="SOX10 - Melanocytic")
qqnorm(SOX10_expression_Melanocytic)
qqline(SOX10_expression_Melanocytic)
shapiro.test(SOX10_expression_Melanocytic)
# Check normality - Undifferentiated
SOX10_expression_Undifferentiated <- metadata.sub$SOX10[metadata.sub$Subtype=="Undifferentiated"]
hist(SOX10_expression_Undifferentiated,
xlab="FPKM",
main="SOX10 - Undifferentiated")
# Quantile-Quantile Plots - Undifferentiated
qqnorm(SOX10_expression_Undifferentiated)
qqline(SOX10_expression_Undifferentiated)
# Shapiro-Wilk test of normality - Undifferentiated
shapiro.test(SOX10_expression_Undifferentiated)
?wilcox.test
test_res <- wilcox.test(SOX10 ~ Subtype, data=metadata.sub)
test_res
names(test_res)
test_res[["p.value"]]
ggplot(metadata.sub, aes(x=Subtype, y=SOX10, color=Subtype)) +
geom_boxplot() +
stat_compare_means(method = "wilcox") +
ylab("FPKM") +
ggtitle("SOX10")
# add a trend line
?stat_smooth
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm", se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point(aes(color=Species)) +
stat_smooth(method="lm",se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, colour = Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point(aes(color=Species)) +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line with color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(aes(color=Species), method="lm", se=FALSE)
# trend line by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line with color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(aes(color=Species), method="lm", se=FALSE)
# remove the se and change color
?stat_smooth
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm", se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line with color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(aes(color=Species), method="lm", se=FALSE)
?cor
# correlation coefficient
cor(iris$Petal.Length,iris$Petal.Width, method = "pearson" )
?cor.test
cor.test(iris$Petal.Length,iris$Petal.Width, method = "pearson" )
test_res <- cor.test(iris$Petal.Length,iris$Petal.Width, method = "pearson" )
names(test_res)
# retrieve the correlation coefficient
test_res[["estimate"]]
# retrieve the p.value
test_res[["p.value"]]
# add to the scatterplot
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm", se=FALSE, color="red") +
annotate("text", x = 2, y = 2.5,
label = paste("r =",
round(test_res[["estimate"]], 2)),
hjust = 0.5, vjust = 0.5) +
theme_classic()
?iris
# add a trend line
?stat_smooth
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm") # this function comes from the ggplot2 package
# remove the Standard error around the trend line and change color
?stat_smooth
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm", se=FALSE, color="red")
# color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# color the dots by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(method="lm",se=FALSE, color="red")
# trend line with color by species
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
stat_smooth(aes(color=Species), method="lm", se=FALSE)
# add to the scatterplot
ggplot(data = iris, aes(x= Petal.Length, y=Petal.Width)) +
geom_point() +
stat_smooth(method="lm", se=FALSE, color="red") +
annotate("text", x = 2, y = 2.5,
label = paste("r =",
round(test_res[["estimate"]], 2)),
hjust = 0.5, vjust = 0.5) +
theme_classic()
# Read the expression and the clinical data
expression_data <- read.table("ALL_expression_matrix.txt", header = T)
expression_data <- as.matrix(expression_data)
# Read the expression and the clinical data
expression_data <- read.table("ALL_expression_matrix.txt", header = T)
expression_data <- as.matrix(expression_data)
clinical_data <- read.csv("ALL_clinical_data.csv")
# check the clinical data
summary(clinical_data)
# Add expression of STOM to the clinical_data df
clinical_data$STOM <- expression_data["STOM", clinical_data$cod]
head(clinical_data)
# Create a scatter plot
ggplot(clinical_data, aes(x=age,y=STOM)) +
geom_point()
my_model <- lm(STOM~age, data=clinical_data)
my_model
# representation of the fit
ggplot(clinical_data, aes(x=age,y=STOM)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) + xlim(0,60)
# Residuals
residuals(my_model) # extracts a vector containing the residuals (error)
# Several plots
par(mfrow=c(2,2))
plot(my_model)
summary(my_model)
library(MASS) # Load the package MASS using library().
data(Pima.tr) # Load the dataset Pima.tr using data(Pima.tr).
?Pima.tr # Use ? to get an idea which variables it contains.
# Run a linear model to test the hypothesis.
my_model <- lm(bp ~ glu, data = Pima.tr)
summary(my_model)
Call:
lm(formula = bp ~ glu, data = Pima.tr)
# Run a linear model to test the hypothesis.
my_model <- lm(bp ~ glu, data = Pima.tr)
summary(my_model)
# Visualize the fit with a scatter plot and a trend line
ggplot(Pima.tr, aes(x=glu, y=bp)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) +
ggtitle("Blood pressure vs glucose") +
xlab("Plasma glucose concentration") +
ylab("Diastolic blood pressure")
# Check assumptions of the model graphically
par(mfrow=c(2,2))
plot(my_model)
my_model
class(model)
class(my_model)
summary(my_model)
my_model <- lm(STOM~age, data=clinical_data)
my_model
# representation of the fit
ggplot(clinical_data, aes(x=age,y=STOM)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE) + xlim(0,60)
# Residuals
residuals(my_model) # extracts a vector containing the residuals (error)
# Several plots
par(mfrow=c(2,2)) # this function prepares the plotting window to receive 4
# plots generated with base graphics and to organize them into a panel of 2
# rows and 2 columns. The par() function is usually called just before calling
# the plot() functions.
plot(my_model) # the plot function can also take as argument a linear regression model
summary(my_model)
summary(my_model)
sessionInfo()
